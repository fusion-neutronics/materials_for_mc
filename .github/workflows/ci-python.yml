name: Test usage with Python

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }} / Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Create environment
        run: |
          python -m pip install --upgrade pip
          python -m pip install virtualenv
          python -m virtualenv venv

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          venv\Scripts\activate.ps1
          python -m pip install pytest maturin numpy
          maturin develop --features pyo3
          
      - name: Install dependencies (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          source venv/bin/activate
          python -m pip install pytest maturin numpy
          maturin develop --features pyo3
          
      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        run: |
          venv\Scripts\activate.ps1
          pytest
      - name: Run tests (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          source venv/bin/activate
          pytest
          
      - name: Run example scripts (Windows)
        if: runner.os == 'Windows'
        run: |
          venv\Scripts\activate.ps1
          python examples/python/material_example.py
          python examples/python/materials_example.py
          python examples/python/nuclide_example.py
          python examples/python/use_in_python.py
          
      - name: Run example scripts (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          source venv/bin/activate
          python examples/python/material_example.py
          python examples/python/materials_example.py
          python examples/python/nuclide_example.py
          python examples/python/use_in_python.py

      - name: Install doc deps (only on ubuntu / py3.11)
        if: runner.os == 'Linux' && matrix.python-version == '3.11'
        shell: bash
        run: |
          source venv/bin/activate
          python -m pip install -r docs/requirements.txt
          sphinx-build -b html docs/source docs/build/html

      - name: Upload docs artifact (only on ubuntu / py3.11)
        if: runner.os == 'Linux' && matrix.python-version == '3.11'
        uses: actions/upload-artifact@v4
        with:
            name: docs-html
            path: docs/build/html
            if-no-files-found: error
            retention-days: 7

      # TODO: Commented out OpenMC-dependent examples
      # python -m pip install --extra-index-url https://shimwell.github.io/wheels openmc
      # python examples/python/compare_macroscopic_reaction.py
      # python examples/python/compare_macroscopic_total_to_openmc.py
      # python examples/python/compare_macroscopic_two_nuclides_reaction.py
      # python examples/python/compare_mean_free_path_to_openmc.py
      # python examples/python/compare_microscopic_reaction.py


  build_wheels:
    name: Build wheels on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    needs: test
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build dependencies
        run: python -m pip install maturin

      - name: Build wheels (Linux)
        if: runner.os == 'Linux'
        uses: PyO3/maturin-action@v1
        with:
          command: build
          args: --release --features pyo3 --out wheelhouse
          manylinux: auto

      - name: Build wheels (Other)  
        run: maturin build --release --features pyo3 --out wheelhouse
        if: runner.os != 'Linux'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: ./wheelhouse/*.whl

  publish_to_pypi:
    name: Publish to PyPI
    needs: [build_wheels]
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    environment:
      name: pypi
      url: https://pypi.org/p/materials-for-mc
    permissions:
      id-token: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "wheels-*"
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
